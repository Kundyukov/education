//#include <iostream>
//using namespace std;
//
//// Ѕазовый класс
//class Base
//{
//public:
//    // virtual - признак виртуальной функции
//    virtual void PrintInfo()
//    {
//        cout << "Base." << endl;
//    }
//};
//
////  ласс, унаследованный от класса Base,
//// важно: здесь должен быть модификатор public
//class Derived : public Base
//{
//public:
//    virtual void PrintInfo() override // спецификатор override нужно указывать
//    {
//        cout << "Derived." << endl;
//    }
//};
//
//int main()
//{
//    // 1. —оздать экземпл€ры базового и производного класса
//    Base obj1;
//    Derived obj2;
//
//    // 2. ќбъ€вить указатель на базовый класс
//    Base* p;
//
//    // 3. »спользовать правило: указатель на базовый класс может указывать
//    //    на любой экземпл€р базового и производного от него класса.
//    //    Ќиже демонстрируетс€ полиморфизм.
//    // 3.1. ”становить указатель p на экземпл€р базового класса obj1
//    //    и вызвать PrintInfo()
//    p = &obj1;
//    p->PrintInfo(); // Base
//
//    // 3.2. ”становить указатель p на экземпл€р производного класса
//    //      и вызвать PrintInfo()
//    p = &obj2;
//    p->PrintInfo(); // Derived - это есть полиморфизм (слово virtual)
//}